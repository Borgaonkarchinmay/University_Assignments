/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/10.0.13
 * Generated at: 2023-04-15 09:44:11 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;
import java.io.*;
import java.sql.*;

public final class VehicleData_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

 static Connection con = null;
  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("java.sql");
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("java.io");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("\r\n");
      out.write("<html>\r\n");
      out.write("	<head>\r\n");
      out.write("		<meta charset=\"UTF-8\">\r\n");
      out.write("		<title>Insert title here</title>\r\n");
      out.write("		\r\n");
      out.write("		<style>\r\n");
      out.write("			table,th,td{\r\n");
      out.write("			border : 2px solid;\r\n");
      out.write("			}\r\n");
      out.write("			table{\r\n");
      out.write("				font-size : 20px;\r\n");
      out.write("				text-align:center;\r\n");
      out.write("				margin-left:auto;\r\n");
      out.write("				margin-right:auto;\r\n");
      out.write("				width:90%;\r\n");
      out.write("			/*  	border-spacing: 5px; */\r\n");
      out.write("			}\r\n");
      out.write("			td{\r\n");
      out.write("				padding : 13px;\r\n");
      out.write("			}\r\n");
      out.write("			h1{\r\n");
      out.write("				font-size : 40px;\r\n");
      out.write("				text-align : center;\r\n");
      out.write("			}\r\n");
      out.write("			button{ \r\n");
      out.write("			  background-color: #008CBA;\r\n");
      out.write("			  border: none;\r\n");
      out.write("			  color: white;\r\n");
      out.write("			  padding: 15px 32px;\r\n");
      out.write("			  text-align: center;\r\n");
      out.write("			  text-decoration: none;\r\n");
      out.write("			  display: inline-block;\r\n");
      out.write("			  font-size: 24px;\r\n");
      out.write("			  border-radius : 8px;\r\n");
      out.write("			  width : 25%;\r\n");
      out.write("			}\r\n");
      out.write("			div{\r\n");
      out.write("				text-align : center;s\r\n");
      out.write("			}\r\n");
      out.write("		</style>\r\n");
      out.write("		\r\n");
      out.write("	</head>\r\n");
      out.write("	\r\n");
      out.write("	<body>\r\n");
      out.write("		<h1>Vehicle Data</h1>\r\n");
      out.write("		");
      out.write("\r\n");
      out.write("		\r\n");
      out.write("		");

			try {
				Class.forName("com.mysql.jdbc.Driver");
				
				//establish a connection
				con = DriverManager.getConnection(
				"jdbc:mysql://localhost:3306/homedb?characterEncoding=utf8", "root", "Chinmaypb@1032"
				);
				System.out.println("Connection established successfully!!");
				
			}catch(Exception e) {
				System.out.println(e);
			}
		
      out.write("\r\n");
      out.write("		\r\n");
      out.write("		");

			try {
				
				System.out.println("FirstServlet \"Service\" method(inherited) called");
				System.out.println("FirstServlet \"DoGet\" method called");
				
				int vid;
				String model;
				String mode;
				
				// Prepare statement == Fetch ==> Database vehicle records
				PreparedStatement st = null;
				st = con.prepareStatement("select * from vehicle");
				
				ResultSet resSet = st.executeQuery(); // Reocords from database fetched
				
		
      out.write("\r\n");
      out.write("		\r\n");
      out.write("		<div>\r\n");
      out.write("		<table>\r\n");
      out.write("			<tr>\r\n");
      out.write("			<th>Vehicle ID</th>\r\n");
      out.write("			<th>Model</th>\r\n");
      out.write("			<th>Type</th>\r\n");
      out.write("			</tr>\r\n");
      out.write("			\r\n");
      out.write("			");
 while(resSet.next()) { 
      out.write("\r\n");
      out.write("				\r\n");
      out.write("				<tr>\r\n");
      out.write("					<td> ");
      out.print( resSet.getInt(1) );
      out.write("</td>\r\n");
      out.write("					<td> ");
      out.print( resSet.getString(2) );
      out.write("</td>\r\n");
      out.write("					<td> ");
      out.print( resSet.getString(3) );
      out.write("</td>\r\n");
      out.write("				</tr>\r\n");
      out.write("				\r\n");
      out.write("			");
} 
      out.write("\r\n");
      out.write("		</table> <br>\r\n");
      out.write("		\r\n");
      out.write("		");

			}catch(Exception e){
				e.printStackTrace();
			}
		
      out.write("		\r\n");
      out.write("		\r\n");
      out.write("		<form action=\"index.html\">\r\n");
      out.write("			<button>Go Home</button>   \r\n");
      out.write("		</form>\r\n");
      out.write("		</div> \r\n");
      out.write("	\r\n");
      out.write("	</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
